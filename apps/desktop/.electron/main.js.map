{
  "version": 3,
  "sources": ["../electron/main.ts"],
  "sourcesContent": ["import fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport {app, BrowserWindow, ipcMain, shell} from \"electron\";\r\nimport {Worker} from \"node:worker_threads\";\r\nimport crypto from \"node:crypto\";\r\n\r\nlet win: BrowserWindow | null = null;\r\nlet worker: Worker | null = null;\r\nlet activeRunId: string | null = null;\r\n\r\nfunction sendLog(obj: { msg: string; level?: \"info\" | \"error\"; runId?: string }) {\r\n  win?.webContents.send(\"agent:log\", {\r\n    runId: obj.runId ?? activeRunId ?? \"default\",\r\n    level: obj.level ?? \"info\",\r\n    msg: obj.msg,\r\n    at: Date.now(),\r\n  });\r\n}\r\n\r\nconst exists = (p: string) => {\r\n  try {\r\n    return fs.existsSync(p);\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n/** Find the monorepo's packages/agent directory in dev & prod */\r\nfunction agentBaseDir(): string {\r\n  const candidates = [\r\n    path.resolve(app.getAppPath(), \"..\", \"packages\", \"agent\"),\r\n    path.resolve(__dirname, \"..\", \"..\", \"..\", \"packages\", \"agent\"),\r\n    path.resolve(process.cwd(), \"..\", \"packages\", \"agent\"),\r\n  ];\r\n  for (const p of candidates) if (exists(p)) return p;\r\n  throw new Error(\r\n      `Could not locate packages/agent. Tried:\\n${candidates.map((p) => \" - \" + p).join(\"\\n\")}`\r\n  );\r\n}\r\n\r\nfunction resolveWorkerEntrypoint(): { entry: string; execArgv?: string[] } {\r\n  const base = agentBaseDir(); // .../packages/agent\r\n\r\n  const distWorker = path.join(base, \"dist\", \"worker.js\");\r\n  const distRun    = path.join(base, \"dist\", \"run.js\");\r\n  const srcWorker  = path.join(base, \"src\", \"worker.ts\");\r\n\r\n  // Use dist only if ALL required outputs exist (packaged or dev)\r\n  if (fs.existsSync(distWorker) && fs.existsSync(distRun)) {\r\n    return { entry: distWorker };\r\n  }\r\n\r\n  // Fallback to TS in dev via ts-node loader\r\n  if (fs.existsSync(srcWorker)) {\r\n    return { entry: srcWorker, execArgv: [\"--loader\", \"ts-node/esm\"] };\r\n    // If you prefer CJS register instead:\r\n    // return { entry: srcWorker, execArgv: [\"-r\", \"ts-node/register/transpile-only\"] };\r\n  }\r\n\r\n  throw new Error(`Agent worker entry not found:\r\n  - ${distWorker}\r\n  - ${distRun}\r\n  - ${srcWorker}`);\r\n}\r\n\r\nfunction ensureWorker() {\r\n  if (worker && worker.threadId) return worker;\r\n\r\n  const { entry, execArgv } = resolveWorkerEntrypoint();\r\n  console.log(\"[main] launching worker:\", entry);\r\n\r\n  worker = new Worker(entry, execArgv?.length ? { execArgv } : undefined);\r\n\r\n  worker.on(\"message\", (msg: any) => {\r\n    if (typeof msg === \"string\") return sendLog({ msg });\r\n    if (msg?.channel === \"log\") {\r\n      const text = typeof msg.payload === \"string\" ? msg.payload : JSON.stringify(msg.payload);\r\n      return sendLog({ runId: msg.runId, level: msg.level ?? \"info\", msg: text });\r\n    }\r\n    if (msg?.channel === \"humanPause\") {\r\n      return sendLog({ runId: msg.runId, msg: `[human pause] ${msg.reason}` });\r\n    }\r\n    sendLog({ msg: JSON.stringify(msg) });\r\n  });\r\n\r\n  worker.on(\"error\", (err) => sendLog({ level: \"error\", msg: `[worker error] ${err.message}` }));\r\n  worker.on(\"exit\", (code) => { sendLog({ msg: `[worker exit] code=${code}` }); worker = null; });\r\n\r\n  return worker;\r\n}\r\n\r\n\r\nfunction createWindow() {\r\n  const preloadPath = path.join(__dirname, \"preload.js\");\r\n  console.log(\"[main] preload at:\", preloadPath, exists(preloadPath) ? \"(exists)\" : \"(MISSING)\");\r\n\r\n  win = new BrowserWindow({\r\n    width: 1400,\r\n    height: 900,\r\n    webPreferences: {\r\n      preload: preloadPath,\r\n      contextIsolation: true,\r\n      nodeIntegration: false,\r\n      webviewTag: true,\r\n    },\r\n  });\r\n\r\n  win.webContents.on(\"did-finish-load\", () => {\r\n    console.log(\"[main] renderer loaded:\", win?.webContents.getURL());\r\n  });\r\n\r\n  const devUrl =\r\n      process.env.ELECTRON_START_URL ||\r\n      process.env.VITE_DEV_SERVER_URL ||\r\n      \"http://localhost:5173\";\r\n\r\n  if (devUrl && !app.isPackaged) {\r\n    win.loadURL(devUrl);\r\n  } else {\r\n    win.loadFile(path.join(__dirname, \"../index.html\"));\r\n  }\r\n}\r\n\r\n// ---- App lifecycle\r\napp.whenReady().then(createWindow);\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  if (process.platform !== \"darwin\") app.quit();\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n});\r\n\r\n// ---- IPC\r\nipcMain.handle(\"agent:run\", async (_e, { task, selectorBundle }) => {\r\n  const runId = crypto.randomUUID();\r\n  activeRunId = runId;\r\n  ensureWorker().postMessage({ type: \"run\", runId, task, selectorBundle });\r\n  return {ok: true, runId};\r\n});\r\n\r\nipcMain.handle(\"agent:stop\", async () => {\r\n  worker?.postMessage({ type: \"stop\" });\r\n  return { ok: true };\r\n});\r\nipcMain.handle(\"agent:takeOver\", async () => {\r\n  worker?.postMessage({ type: \"takeOver\" });\r\n  return { ok: true };\r\n});\r\nipcMain.handle(\"agent:resume\", async () => {\r\n  worker?.postMessage({ type: \"resume\" });\r\n  return { ok: true };\r\n});\r\n\r\nipcMain.handle(\"shell:showInFolder\", (_e, filePath: string) =>\r\n    shell.showItemInFolder(filePath)\r\n);\r\n\r\n// tiny debug helper so you can test the bridge from console: await window.alpha?.hello?.()\r\nipcMain.handle(\"alpha:hello\", () => \"ok\");\r\n"],
  "mappings": "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",
  "names": ["fs", "path", "crypto"]
}
