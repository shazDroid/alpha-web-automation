{
  "version": 3,
  "sources": ["../electron/main.ts"],
  "sourcesContent": ["// apps/desktop/electron/main.ts\r\nimport fs from \"node:fs\";\r\nimport path from \"node:path\";\r\nimport {app, BrowserWindow, ipcMain, shell} from \"electron\";\r\nimport {Worker} from \"node:worker_threads\";\r\nimport crypto from \"node:crypto\";\r\nimport WebContents = Electron.WebContents;\r\n\r\nlet win: BrowserWindow | null = null;\r\nlet worker: Worker | null = null;          // <\u2014 declare BEFORE ensureWorker\r\nlet activeRunId: string | null = null;\r\nlet lastWebviewGuestId: number | null = null;\r\n\r\napp.commandLine.appendSwitch(\"remote-debugging-port\", \"9222\");\r\napp.commandLine.appendSwitch(\"remote-allow-origins\", \"*\");\r\n\r\nlet latestWebviewId: number | null = null;\r\n\r\n/** Send a line to the renderer timeline */\r\nfunction sendLog(obj: { msg: string; level?: \"info\" | \"error\"; runId?: string }) {\r\n  win?.webContents.send(\"agent:log\", {\r\n    runId: obj.runId ?? activeRunId ?? \"default\",\r\n    level: obj.level ?? \"info\",\r\n    msg: obj.msg,\r\n    at: Date.now(),\r\n  });\r\n}\r\n\r\n\r\n/** Create / (re)use worker */\r\nfunction agentPackageJson(): any {\r\n  const base = agentBaseDir();\r\n  const pkg = path.join(base, \"package.json\");\r\n  try { return JSON.parse(fs.readFileSync(pkg, \"utf8\")); } catch { return null; }\r\n}\r\n\r\n\r\nfunction agentBaseDir(): string {\r\n  const candidates = [\r\n    path.resolve(app.getAppPath(), \"..\", \"packages\", \"agent\"),\r\n    path.resolve(__dirname, \"..\", \"..\", \"..\", \"packages\", \"agent\"),\r\n    path.resolve(process.cwd(), \"..\", \"packages\", \"agent\"),\r\n  ];\r\n  for (const p of candidates) if (fs.existsSync(p)) return p;\r\n  throw new Error(\r\n      `Could not locate packages/agent. Tried:\\n${candidates.map((p) => \" - \" + p).join(\"\\n\")}`\r\n  );\r\n}\r\n\r\nfunction resolveWorkerPaths() {\r\n  const base = agentBaseDir();\r\n  return {\r\n    js: path.join(base, \"dist\", \"worker.js\"), // built output\r\n    ts: path.join(base, \"src\", \"worker.ts\"),  // dev source\r\n  };\r\n}\r\n\r\nfunction ensureWorker(): Worker {\r\n  if (worker && worker.threadId) return worker;\r\n\r\n  const { js, ts } = resolveWorkerPaths();\r\n\r\n  if (fs.existsSync(js)) {\r\n    // Prefer built JS when available (stable)\r\n    console.log(\"[main] launching worker (built JS):\", js);\r\n    worker = new Worker(js); // <-- no `type` option\r\n  } else if (fs.existsSync(ts)) {\r\n    console.log(\"[main] launching worker (ts-node/esm):\", ts);\r\n    worker = new Worker(ts, {\r\n      execArgv: [\"--loader\", \"ts-node/esm\"],\r\n    });\r\n  } else {\r\n    throw new Error(\r\n        `Worker entry not found:\\n - ${js}\\n - ${ts}\\n` +\r\n        `If you want to run the built worker, run: npm run build -w packages/agent`\r\n    );\r\n  }\r\n\r\n  worker.on(\"message\", (msg: any) => {\r\n    if (typeof msg === \"string\") return sendLog({ msg });\r\n    if (msg?.channel === \"log\") {\r\n      const text = typeof msg.payload === \"string\" ? msg.payload : JSON.stringify(msg.payload);\r\n      return sendLog({ runId: msg.runId, level: msg.level ?? \"info\", msg: text });\r\n    }\r\n    if (msg?.channel === \"humanPause\") {\r\n      return sendLog({ runId: msg.runId, msg: `[human pause] ${msg.reason}` });\r\n    }\r\n    sendLog({ msg: JSON.stringify(msg) });\r\n  });\r\n\r\n  worker.on(\"error\", (err) => sendLog({ level: \"error\", msg: `[worker error] ${err.message}` }));\r\n  worker.on(\"exit\",  (code) => { sendLog({ msg: `[worker exit] code=${code}` }); worker = null; });\r\n\r\n  if (lastWebviewGuestId != null) {\r\n    worker.postMessage({ type: \"webview-ready\", webContentsId: lastWebviewGuestId });\r\n  }\r\n\r\n  return worker;\r\n}\r\n\r\n\r\n/** BrowserWindow */\r\nfunction createWindow() {\r\n  const preloadPath = path.join(__dirname, \"preload.js\");\r\n  sendLog({ msg: `[main] preload at: ${preloadPath} ${fs.existsSync(preloadPath) ? \"(exists)\" : \"(MISSING)\"}` });\r\n\r\n  win = new BrowserWindow({\r\n    width: 1400,\r\n    height: 900,\r\n    webPreferences: {\r\n      preload: preloadPath,\r\n      contextIsolation: true,\r\n      nodeIntegration: false,\r\n      webviewTag: true,\r\n    },\r\n  });\r\n\r\n  win.webContents.on(\"did-attach-webview\", (_e, guest: WebContents) => {\r\n    latestWebviewId = guest.id;\r\n    sendLog({msg: `[main] webview attached (guest id=${guest.id})`});\r\n    worker?.postMessage({type: \"webview-ready\", webContentsId: guest.id});\r\n  });\r\n\r\n  win.webContents.on(\"did-finish-load\", () => {\r\n    sendLog({ msg: `[main] renderer loaded: ${win?.webContents.getURL()}` });\r\n  });\r\n\r\n  const devUrl =\r\n      process.env.ELECTRON_START_URL ||\r\n      process.env.VITE_DEV_SERVER_URL ||\r\n      \"http://localhost:5173\";\r\n\r\n  if (devUrl && !app.isPackaged) {\r\n    win.loadURL(devUrl);\r\n  } else {\r\n    win.loadFile(path.join(__dirname, \"../index.html\"));\r\n  }\r\n\r\n  // Prevent the app shell (main renderer) from navigating away\r\n  win.webContents.on(\"will-navigate\", (e, url) => {\r\n    const isAppUrl =\r\n        (devUrl && url.startsWith(devUrl)) ||\r\n        url.startsWith(\"file://\");\r\n    if (!isAppUrl) e.preventDefault();\r\n  });\r\n\r\n// Also deny window.open() from replacing our shell\r\n  win.webContents.setWindowOpenHandler(() => ({ action: \"deny\" }));\r\n}\r\n\r\nfunction notifyWorkerWebviewReady(id: number) {\r\n  lastWebviewGuestId = id;\r\n  if (worker) {\r\n    worker.postMessage({ type: \"webview-ready\", webContentsId: id });\r\n  }\r\n}\r\n\r\n/* ---------- app lifecycle ---------- */\r\napp.whenReady().then(createWindow);\r\napp.on(\"web-contents-created\", (_event, contents) => {\r\n  if (contents.getType() === \"webview\") {\r\n    notifyWorkerWebviewReady(contents.id);\r\n    contents.once(\"dom-ready\", () => notifyWorkerWebviewReady(contents.id));\r\n  }\r\n});\r\n\r\napp.on(\"window-all-closed\", () => {\r\n  if (process.platform !== \"darwin\") app.quit();\r\n});\r\n\r\napp.on(\"activate\", () => {\r\n  if (BrowserWindow.getAllWindows().length === 0) createWindow();\r\n});\r\n\r\n/* ---------- IPC ---------- */\r\nipcMain.handle(\"agent:run\", async (_e, { task, selectorBundle }) => {\r\n  const runId = crypto.randomUUID();\r\n  activeRunId = runId;\r\n  ensureWorker().postMessage({ type: \"run\", runId, task, selectorBundle });\r\n  return { ok: true, runId };\r\n});\r\n\r\nipcMain.handle(\"agent:stop\", async () => {\r\n  worker?.postMessage({ type: \"stop\" });\r\n  return { ok: true };\r\n});\r\n\r\nipcMain.handle(\"agent:takeOver\", async () => {\r\n  worker?.postMessage({ type: \"takeOver\" });\r\n  return { ok: true };\r\n});\r\n\r\nipcMain.handle(\"agent:resume\", async () => {\r\n  worker?.postMessage({ type: \"resume\" });\r\n  return { ok: true };\r\n});\r\n\r\nipcMain.handle(\"webview:ready\", (_e, id: number) => {\r\n  latestWebviewId = id;\r\n  sendLog({msg: `[main] webview:ready (guest id=${id})`});\r\n  worker?.postMessage({type: \"webview-ready\", webContentsId: id});\r\n  return {ok: true};\r\n});\r\n\r\nipcMain.handle(\"webview:get-latest\", () => latestWebviewId);\r\n\r\nipcMain.handle(\"shell:showInFolder\", (_e, filePath: string) => shell.showItemInFolder(filePath));\r\nipcMain.handle(\"alpha:hello\", () => \"ok\");\r\n"],
  "mappings": "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",
  "names": ["path", "fs", "crypto"]
}
